@page "/game-setup"
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="setup-container">
    <header>
        <h1>Game Setup</h1>
        <p>Configure your Rummikub game</p>
    </header>

    <div class="setup-form">
        <div class="form-group">
            <label for="gameId">Game ID (optional)</label>
            <input id="gameId" @bind="GameId" @bind:after="ValidateGameId" type="text" 
                   class="form-control @(HasGameIdError ? "error" : "")"
                   placeholder="Leave empty to generate automatically" maxlength="50"
                   @onkeydown="HandleGameIdKeyDown"/>
            @if (HasGameIdError)
            {
                <div class="error-message">@GameIdErrorMessage</div>
            }
            <small class="form-text">If no ID is provided, one will be generated automatically. Format: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX</small>
        </div>

        <div class="form-group">
            <label>Players</label>
            <small class="form-text">Add up to 4 players. Leave names empty to use defaults.</small>

            <div class="players-container">
                @for (var i = 0; i < PlayerCount; i++)
                {
                    var index = i;
                    <div class="player-card">
                        <div class="player-info">
                            <label for="player@(i + 1)" class="player-label">Player @(i + 1)</label>
                            <input id="player@(i + 1)" @bind="PlayerNames[index]" type="text" class="player-input"
                                   placeholder="@GetDefaultPlayerName(i)" maxlength="20"
                                   @onkeydown="@(e => HandlePlayerNameKeyDown(e, index))"/>
                        </div>

                        <div class="player-type-section">
                            <div class="toggle-container">
                                <button type="button" class="toggle-switch @(PlayerTypes[index] ? "real" : "ai")"
                                        @onclick="() => TogglePlayerType(index)"
                                        title="@(PlayerTypes[index] ? "Real Player" : "AI Player")">
                                    <span class="toggle-text">@(PlayerTypes[index] ? "Real" : "AI")</span>
                                    <div class="toggle-slider"></div>
                                </button>
                            </div>
                        </div>

                        @if (CanRemovePlayer)
                        {
                            <button type="button" class="btn-remove" @onclick="() => RemovePlayer(index)"
                                    title="Remove player">
                                <svg width="12" height="12" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                    <line x1="18" y1="6" x2="6" y2="18"></line>
                                    <line x1="6" y1="6" x2="18" y2="18"></line>
                                </svg>
                            </button>
                        }
                    </div>
                }

                @if (CanAddPlayer)
                {
                    <button type="button" class="btn-add-player" @onclick="AddPlayer">
                        <svg width="16" height="16" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <line x1="12" y1="5" x2="12" y2="19"></line>
                            <line x1="5" y1="12" x2="19" y2="12"></line>
                        </svg>
                        Add Player
                    </button>
                }
            </div>
        </div>

        <div class="form-actions">
            <button @onclick="NavigateToHome" class="btn-secondary">
                Back
            </button>
            <button @onclick="StartGame" class="btn-primary" disabled="@HasGameIdError">
                Start Game
            </button>
        </div>
    </div>
</div>

<style>
    .setup-container {
        max-width: 600px;
        margin: 50px auto;
        padding: 30px;
        font-family: Arial, sans-serif;
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    header {
        text-align: center;
        margin-bottom: 40px;
    }

    header h1 {
        font-size: 2.2rem;
        color: #3a3a3a;
        margin: 0 0 10px 0;
    }

    header p {
        color: #777;
        font-size: 1.1rem;
        margin: 0;
    }

    .setup-form {
        display: flex;
        flex-direction: column;
        gap: 25px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

    .form-group label {
        font-weight: 600;
        color: #3a3a3a;
        margin-bottom: 8px;
        font-size: 1.1rem;
    }

    .form-control {
        padding: 12px 15px;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.3s, box-shadow 0.3s;
        background-color: #fff;
    }

    .form-control:focus {
        outline: none;
        border-color: #2196f3;
        box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);
    }

    .form-control.error {
        border-color: #f44336;
        box-shadow: 0 0 0 3px rgba(244, 67, 54, 0.1);
    }

    .error-message {
        color: #f44336;
        font-size: 0.9rem;
        margin-top: 5px;
        font-weight: 500;
    }

    .btn-primary:disabled {
        background-color: #ccc;
        cursor: not-allowed;
        transform: none;
    }

    .btn-primary:disabled:hover {
        background-color: #ccc;
        transform: none;
    }

    .form-text {
        margin-top: 5px;
        color: #777;
        font-size: 0.9rem;
        font-style: italic;
    }

    .players-container {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin-top: 15px;
    }

    .player-card {
        display: flex;
        align-items: center;
        gap: 20px;
        padding: 20px;
        background: #f8f9fa;
        border: 2px solid #e9ecef;
        border-radius: 12px;
        transition: all 0.3s ease;
        animation: slideIn 0.3s ease-out;
    }

    .player-card:hover {
        border-color: #2196f3;
        box-shadow: 0 2px 8px rgba(33, 150, 243, 0.1);
    }

    .player-info {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .player-label {
        font-size: 0.9rem;
        font-weight: 600;
        color: #495057;
        margin: 0;
    }

    .player-input {
        padding: 10px 12px;
        border: 1px solid #ced4da;
        border-radius: 6px;
        font-size: 1rem;
        transition: border-color 0.3s, box-shadow 0.3s;
        background-color: #fff;
    }

    .player-input:focus {
        outline: none;
        border-color: #2196f3;
        box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.1);
    }

    .player-type-section {
        display: flex;
        align-items: center;
        min-width: 80px;
    }

    .toggle-container {
        display: flex;
        justify-content: center;
    }

    .toggle-switch {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 70px;
        height: 32px;
        border: none;
        border-radius: 16px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 0.8rem;
        font-weight: 600;
        color: white;
        outline: none;
    }

    .toggle-switch.real {
        background: linear-gradient(135deg, #4caf50, #45a049);
        box-shadow: 0 2px 4px rgba(76, 175, 80, 0.3);
    }

    .toggle-switch.ai {
        background: linear-gradient(135deg, #ff9800, #f57c00);
        box-shadow: 0 2px 4px rgba(255, 152, 0, 0.3);
    }

    .toggle-switch:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .toggle-switch:active {
        transform: translateY(0);
    }

    .toggle-text {
        z-index: 2;
        position: relative;
        font-weight: 700;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }

    .toggle-slider {
        position: absolute;
        top: 2px;
        left: 2px;
        width: 28px;
        height: 28px;
        background: rgba(255, 255, 255, 0.3);
        border-radius: 14px;
        transition: transform 0.3s ease;
        backdrop-filter: blur(10px);
    }

    .toggle-switch.real .toggle-slider {
        transform: translateX(0);
    }

    .toggle-switch.ai .toggle-slider {
        transform: translateX(38px);
    }

    .btn-remove {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 28px;
        height: 28px;
        border: none;
        border-radius: 50%;
        background-color: #dc3545;
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
        flex-shrink: 0;
    }

    .btn-remove:hover {
        background-color: #c82333;
        transform: scale(1.1);
    }

    .btn-remove:active {
        transform: scale(0.95);
    }

    .btn-add-player {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        padding: 15px 20px;
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        border: none;
        border-radius: 10px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        align-self: flex-start;
    }

    .btn-add-player:hover {
        background: linear-gradient(135deg, #218838, #1ea97c);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
    }

    .btn-add-player:active {
        transform: translateY(0);
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .form-actions {
        display: flex;
        gap: 15px;
        justify-content: center;
        margin-top: 20px;
    }

    .btn-primary, .btn-secondary {
        padding: 12px 30px;
        font-size: 1.1rem;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.1s;
        font-weight: 600;
        min-width: 150px;
    }

    .btn-primary {
        background-color: #2196f3;
    }

    .btn-primary:hover {
        background-color: #1976d2;
        transform: translateY(-1px);
    }

    .btn-secondary {
        background-color: #757575;
    }

    .btn-secondary:hover {
        background-color: #616161;
        transform: translateY(-1px);
    }

    .btn-primary:active, .btn-secondary:active {
        transform: translateY(0);
    }

    @@media (max-width: 768px) {
        .setup-container {
            margin: 20px;
            padding: 20px;
        }

        .player-card {
            flex-direction: column;
            align-items: stretch;
            gap: 15px;
            padding: 15px;
        }

        .player-info {
            flex-direction: column;
            gap: 6px;
        }

        .player-type-section {
            align-self: center;
            margin: 10px 0;
        }

        .btn-remove {
            align-self: center;
            margin-top: 10px;
        }

        .btn-add-player {
            align-self: stretch;
            justify-content: center;
        }

        .form-actions {
            flex-direction: column;
        }

        .btn-primary, .btn-secondary {
            width: 100%;
        }
    }
</style>

@code {
    private string GameId { get; set; } = string.Empty;
    private List<string> PlayerNames { get; } = ["", ""];
    private List<bool> PlayerTypes { get; } = [true, true]; // true = Real, false = AI
    private bool HasGameIdError { get; set; }
    private string GameIdErrorMessage { get; set; } = string.Empty;

    private int PlayerCount => PlayerNames.Count;
    private bool CanAddPlayer => PlayerCount < 4;
    private bool CanRemovePlayer => PlayerCount > 2;

    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }

    private void AddPlayer()
    {
        if (CanAddPlayer)
        {
            PlayerNames.Add("");
            PlayerTypes.Add(true); // New player defaults to Real
            StateHasChanged();
        }
    }

    private void RemovePlayer(int index)
    {
        if (CanRemovePlayer && index >= 0 && index < PlayerNames.Count)
        {
            PlayerNames.RemoveAt(index);
            PlayerTypes.RemoveAt(index);
            StateHasChanged();
        }
    }

    private void TogglePlayerType(int index)
    {
        if (index >= 0 && index < PlayerTypes.Count)
        {
            PlayerTypes[index] = !PlayerTypes[index];
            StateHasChanged();
        }
    }

    private static string GetDefaultPlayerName(int index)
    {
        var defaultNames = new[] { "Alice", "Bob", "Charlie", "Diana" };
        return index < defaultNames.Length ? defaultNames[index] : $"Player {index + 1}";
    }

    private static void HandleGameIdKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // On Game ID field, Enter should just move to next field naturally
            // No action needed - browser handles tab order
        }
    }

    private void HandlePlayerNameKeyDown(KeyboardEventArgs e, int playerIndex)
    {
        if (e.Key != "Enter") return;
        if (playerIndex != PlayerCount - 1) return;
        // Only start game when Enter is pressed on the LAST player name input
        if (!HasGameIdError)
        {
            StartGame();
        }
        // For other player inputs, Enter naturally moves to next field
    }

    private void ValidateGameId()
    {
        if (string.IsNullOrWhiteSpace(GameId))
        {
            HasGameIdError = false;
            GameIdErrorMessage = string.Empty;
            return;
        }

        var trimmedId = GameId.Trim();
        if (!Guid.TryParse(trimmedId, out _))
        {
            HasGameIdError = true;
            GameIdErrorMessage = "Invalid GUID format. Expected format: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX";
        }
        else
        {
            HasGameIdError = false;
            GameIdErrorMessage = string.Empty;
        }
    }

    private void StartGame()
    {
        if (HasGameIdError)
        {
            return;
        }

        var queryString = $"?playerCount={PlayerCount}";

        // Always include game ID in URL - generate one if not provided
        var gameIdToUse = !string.IsNullOrWhiteSpace(GameId) ? GameId.Trim() : Guid.NewGuid().ToString();
        queryString += $"&gameId={Uri.EscapeDataString(gameIdToUse)}";

        // Add player names if any are provided
        var providedNames = new List<string>();
        for (var i = 0; i < PlayerCount; i++)
        {
            providedNames.Add(!string.IsNullOrWhiteSpace(PlayerNames[i]) ? Uri.EscapeDataString(PlayerNames[i].Trim()) : ""); // Empty for default name
        }

        if (providedNames.Any(name => !string.IsNullOrEmpty(name)))
        {
            queryString += $"&playerNames={string.Join(",", providedNames)}";
        }

        // Add player types (R for Real, A for AI)
        var playerTypesString = string.Join(",", PlayerTypes.Select(isReal => isReal ? "R" : "A"));
        queryString += $"&playerTypes={playerTypesString}";

        Navigation.NavigateTo($"/game{queryString}");
    }

}