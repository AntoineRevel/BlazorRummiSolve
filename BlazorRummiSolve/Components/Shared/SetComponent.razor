@using RummiSolve
<div class="set-container">
    <div class="tiles">
        @{
            List<Tile>? tilesToHighlight = null; //Avoid creating copies TODO
            if (ShowHint)
            {
                tilesToHighlight = [..HighlightTiles];
            }
        }

        @foreach (var tile in Set.Tiles)
        {
            var shouldHighlight = false;

            if (ShowHint)
            {
                var matchingTile = tilesToHighlight!.FirstOrDefault(t => t.Equals(tile));
                if (!matchingTile.IsNull)
                {
                    shouldHighlight = true;
                    tilesToHighlight!.Remove(matchingTile);
                }
            }

            <TileComponent Tile="tile" ShouldHighlight="@shouldHighlight"/>
        }
    </div>
</div>

@code {
    [Parameter] public required Set Set { get; set; }
    [Parameter] public List<Tile> HighlightTiles { get; set; } = [];
    [Parameter] public bool ShowHint { get; set; }
}

<style>
    .set-container {
        display: inline-block;
        white-space: normal; /* Allow wrapping */
        padding: 5px;
        border-radius: 5px;
    }

    .tiles {
        display: flex; /* Use flexbox for layout */
        flex-wrap: wrap; /* Allow tiles to wrap to the next line */
        gap: 3px; /* Add consistent spacing between tiles */
    }

    .tiles .tile {
        margin: 2px;
        flex: 0 0 auto; /* Prevent tiles from stretching */
    }
</style>