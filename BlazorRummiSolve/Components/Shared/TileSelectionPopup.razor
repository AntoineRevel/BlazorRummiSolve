@using RummiSolve
<div class="popup-overlay @(IsVisible ? "visible" : "")" @onclick="OnOverlayClick">
    <div class="popup-content" @onclick:stopPropagation="true">
        <div class="popup-header">
            <h3>Select Tiles</h3>
            <button class="close-button" @onclick="OnClose">×</button>
        </div>

        @if (SelectedTiles.Any())
        {
            <div class="selected-tiles-section">
                <h4>Selected Tiles (@SelectedTiles.Count)</h4>
                <div class="selected-tiles-display">
                    @foreach (var selectedTile in SelectedTiles)
                    {
                        <div class="selected-tile-wrapper" @onclick="() => OnTileClick(selectedTile)">
                            <TileComponent Tile="selectedTile" ShouldHighlight="false"/>
                            <div class="remove-indicator">×</div>
                        </div>
                    }
                </div>
            </div>
        }

        <div class="available-tiles-section">
            <h4>Available Tiles</h4>
            <div class="tiles-container">
                @foreach (var tileGroup in GetGroupedTiles())
                {
                    var tileType = tileGroup.Key;
                    var totalCount = tileGroup.Count();
                    var selectedCount = GetSelectedCountForTile(tileType);
                    var remainingCount = totalCount - selectedCount;
                    var isFullySelected = remainingCount == 0;

                    <div class="tile-stack @(isFullySelected ? "fully-selected" : "")"
                         @onclick="() => OnTileStackClick(tileType)">
                        @if (remainingCount > 0)
                        {
                            @for (var i = 0; i < remainingCount; i++)
                            {
                                var stackOffset = i * 3;

                                <div class="stacked-tile"
                                     style="z-index: @(100 - i); transform: translate(@(stackOffset)px, @(-stackOffset)px);">
                                    <TileComponent Tile="tileType" ShouldHighlight="false"/>
                                </div>
                            }

                            @if (remainingCount > 1)
                            {
                                <div class="count-indicator">@remainingCount</div>
                            }
                        }
                        else
                        {
                            <div class="stacked-tile greyed-out">
                                <TileComponent Tile="tileType" ShouldHighlight="false"/>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <div class="popup-footer">
            <div class="action-buttons">
                <button class="btn btn-secondary" @onclick="OnClearSelection">Clear</button>
                <button class="btn btn-primary" @onclick="OnConfirm">Confirm</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public List<Tile> AvailableTiles { get; set; } = new();
    [Parameter] public List<Tile> SelectedTiles { get; set; } = new();
    [Parameter] public EventCallback<List<Tile>> OnSelectionChanged { get; set; }
    [Parameter] public EventCallback OnClosePopup { get; set; }

    private async Task OnTileClick(Tile tile)
    {
        if (SelectedTiles.Contains(tile))
        {
            SelectedTiles.Remove(tile);
        }
        else
        {
            SelectedTiles.Add(tile);
        }

        await OnSelectionChanged.InvokeAsync(SelectedTiles);
        StateHasChanged();
    }

    private async Task OnTileStackClick(Tile tileType)
    {
        var totalAvailable = AvailableTiles.Count(t => t.Equals(tileType));
        var currentSelectedCount = GetSelectedCountForTile(tileType);

        // Cycle: 0 → 1 → 2 → ... → max → 0
        var newSelectedCount = (currentSelectedCount + 1) % (totalAvailable + 1);

        // Remove all instances of this tile type from selection
        SelectedTiles.RemoveAll(t => t.Equals(tileType));

        // Add the new count of this tile type
        for (var i = 0; i < newSelectedCount; i++)
        {
            SelectedTiles.Add(tileType);
        }

        await OnSelectionChanged.InvokeAsync(SelectedTiles);
        StateHasChanged();
    }

    private int GetSelectedCountForTile(Tile tileType)
    {
        return SelectedTiles.Count(t => t.Equals(tileType));
    }

    private async Task OnClearSelection()
    {
        SelectedTiles.Clear();
        await OnSelectionChanged.InvokeAsync(SelectedTiles);
        StateHasChanged();
    }

    private async Task OnConfirm()
    {
        await OnClosePopup.InvokeAsync();
    }

    private async Task OnClose()
    {
        SelectedTiles.Clear();
        await OnSelectionChanged.InvokeAsync(SelectedTiles);
        await OnClosePopup.InvokeAsync();
    }

    private async Task OnOverlayClick()
    {
        await OnClose();
    }

    private IEnumerable<IGrouping<Tile, Tile>> GetGroupedTiles()
    {
        return GetSortedTiles()
            .GroupBy(tile => tile)
            .OrderBy(g => g.Key.IsJoker ? 1 : 0)
            .ThenBy(g => g.Key.Color)
            .ThenBy(g => g.Key.Value);
    }

    private List<Tile> GetSortedTiles()
    {
        return AvailableTiles
            .OrderBy(tile => tile.IsJoker ? 1 : 0)
            .ThenBy(tile => tile.Color)
            .ThenBy(tile => tile.Value)
            .ToList();
    }

}

<style>
    .popup-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease, visibility 0.3s ease;
    }

    .popup-overlay.visible {
        opacity: 1;
        visibility: visible;
    }

    .popup-content {
        background: white;
        border-radius: 10px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        max-width: 95vw;
        max-height: 90vh;
        width: min(1000px, 95vw);
        display: flex;
        flex-direction: column;
        transform: scale(0.9);
        transition: transform 0.3s ease;
        overflow: hidden;
    }

    .popup-overlay.visible .popup-content {
        transform: scale(1);
    }

    .popup-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        border-bottom: 1px solid #eee;
    }

    .popup-header h3 {
        margin: 0;
        color: #333;
    }

    .close-button {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #666;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .close-button:hover {
        background-color: #f0f0f0;
        color: #333;
    }

    .selected-tiles-section {
        padding: 15px 20px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #eee;
    }

    .selected-tiles-section h4 {
        margin: 0 0 15px 0;
        color: #495057;
        font-size: 16px;
        font-weight: 600;
    }

    .selected-tiles-display {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        min-height: 40px;
        max-height: 150px;
        overflow-y: auto;
    }

    .selected-tile-wrapper {
        position: relative;
        cursor: pointer;
        transition: transform 0.2s ease;
    }

    .selected-tile-wrapper:hover {
        transform: scale(1.05);
    }

    .selected-tile-wrapper:hover .remove-indicator {
        opacity: 1;
    }

    .remove-indicator {
        position: absolute;
        top: -8px;
        right: -8px;
        background-color: #dc3545;
        color: white;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 14px;
        font-weight: bold;
        opacity: 0;
        transition: opacity 0.2s ease;
        z-index: 10;
    }

    .available-tiles-section {
        padding: 0 15px 15px 15px;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    .available-tiles-section h4 {
        margin: 0 0 10px 0;
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        padding: 15px 0 5px 0;
        flex-shrink: 0;
    }

    .tiles-container {
        overflow-y: auto;
        overflow-x: hidden;
        flex-grow: 1;
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
        gap: 8px;
        padding: 5px;
        align-content: start;
        max-height: calc(90vh - 300px);
    }

    .tile-stack {
        position: relative;
        cursor: pointer;
        min-width: 50px;
        min-height: 70px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .stacked-tile {
        position: absolute;
        top: 0;
        left: 0;
        transition: transform 0.2s ease;
    }

    .tile-stack:hover .stacked-tile {
        transform: translate(0, 0) !important;
    }

    .tile-stack.fully-selected {
        opacity: 0.5;
        cursor: pointer;
    }

    .tile-stack.fully-selected:hover {
        opacity: 0.7;
    }

    .stacked-tile.greyed-out {
        opacity: 0.4;
        filter: grayscale(80%);
        pointer-events: none;
    }

    .stacked-tile.greyed-out .tile {
        background-color: #e9ecef !important;
        border-color: #ced4da !important;
        color: #6c757d !important;
    }

    .stacked-tile.greyed-out .tile-number {
        color: #6c757d !important;
    }

    .count-indicator {
        position: absolute;
        bottom: -3px;
        right: -3px;
        background-color: #007bff;
        color: white;
        border-radius: 50%;
        width: 18px;
        height: 18px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 10px;
        font-weight: bold;
        z-index: 200;
    }


    .popup-footer {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 20px;
        border-top: 1px solid #eee;
        background-color: #f8f9fa;
        border-radius: 0 0 10px 10px;
    }

    .action-buttons {
        display: flex;
        gap: 10px;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        transition: background-color 0.2s ease;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background-color: #545b62;
    }
</style>